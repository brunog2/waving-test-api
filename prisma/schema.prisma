// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  extensions = [unaccent]
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id         String        @id @default(uuid())
  name       String
  email      String        @unique
  password   String
  role       Role          @default(CUSTOMER)
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  deletedAt  DateTime?     @map("deleted_at")
  orders     Order[]
  comments   Comment[]
  cartItems  CartProduct[]

  @@map("users")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  products    Product[]

  @@map("categories")
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?       @db.Text
  price       Decimal       @db.Decimal(10, 2)
  imageUrl    String?       @map("image_url")
  available   Boolean       @default(true)
  categoryId  String        @map("category_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  category    Category      @relation(fields: [categoryId], references: [id])
  orderItems  OrderProduct[]
  comments    Comment[]
  cartItems   CartProduct[]

  @@map("products")
  @@index([categoryId])
}

model Order {
  id         String        @id @default(uuid())
  userId     String        @map("user_id")
  total      Decimal       @db.Decimal(10, 2)
  status     OrderStatus   @default(PENDING)
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  deletedAt  DateTime?     @map("deleted_at")
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      OrderProduct[]

  @@map("orders")
  @@index([userId])
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_products")
  @@index([orderId])
  @@index([productId])
}

model Comment {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  userId    String   @map("user_id")
  rating    Int
  content   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
  @@index([userId])
  @@index([productId])
}

model CartProduct {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_products")
  @@index([userId])
  @@index([productId])
}
